" fzf
set rtp+=~/.fzf
" FZF integration
let g:fzf_launcher = "fzf_launch %s"
let g:fzf_action = {
            \ 'ctrl-m': 'e',
            \ 'ctrl-t': 'tabedit'}
nnoremap <C-f> :FZF<cr>

call plug#begin('~/.vim/bundle')
" plugins
Plug 'mbbill/undotree'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'itchyny/lightline.vim'
Plug 'jeetsukumaran/vim-buffergator'
Plug 'Lokaltog/vim-easymotion'
Plug 'aperezdc/vim-template'
Plug 'lumiliet/vim-twig'
Plug 'junegunn/goyo.vim'
Plug 'tpope/vim-surround'
Plug 'sheerun/vim-polyglot'
Plug 'pangloss/vim-javascript'
Plug 'mhinz/vim-signify'
Plug 'w0rp/ale'
Plug 'maximbaz/lightline-ale'
Plug 'majutsushi/tagbar'
Plug 'ap/vim-css-color'
Plug 'mattn/emmet-vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-abolish'
Plug 'chr4/nginx.vim'
Plug 'gabesoft/vim-ags'
call plug#end()

" search highlight colours
hi Search cterm=NONE ctermfg=white ctermbg=5
set synmaxcol=250
set backspace=2
set background=dark
set hidden           " Make certain buffers hidden
set pastetoggle=<F2> " Bind pastetoggle to F2
set showmode         " Show what mode you're in
set nocompatible
set ai               " Set autoindent
set smartindent      " Use intelligent indentation
set tabstop=4        " Tab width is 4 spaces
set shiftwidth=4     " Indent also with 4 spaces
set expandtab        " Expand tabs to spaces
set textwidth=0      " Sets width of text per line, 0 for line wrapping
set wrap             " Set wrapping
set linebreak        " For some reason, wiki says this should be set when trying to disasble linebreak
set nolist           " List disables linebreak
set wrapmargin=0     " Stop inserting line break on wrap
set formatoptions+=1 " Stop wrapping
set number           " Show line number
set relativenumber   " hybrid line number
set showmatch        " Hilights matching searched
set ignorecase       " Searches are case insensitive...
set smartcase        " ... unless they contain at least one capital letter
set t_Co=256         " 256 colours
set tags=./tags;/    " Search the source tree for tags
set laststatus=2     " Always show the statusline
set encoding=utf-8   " Necessary to show Unicode glyphs
set nomodeline       " Disable reading the first and last few lines of each file for ex commands, for security reasons
set noswapfile       " no swap files
set statusline=%f\   "tail of the filename
set statusline+=\ \ %c, "cursor column
set statusline+=%l/%L "cursor line/total lines
set statusline+=\ %P "percent through file
set laststatus=2
set mouse=""         " disable mouse
set noshowmode       " unecessary with lightline

" javascript different indentation
autocmd Filetype javascript setlocal ts=2 sw=2 sts=0 expandtab
autocmd Filetype css setlocal ts=2 sw=2 sts=0 expandtab

nmap <silent> <A-Up> :wincmd k<CR>
nmap <silent> <A-Down> :wincmd j<CR>
nmap <silent> <A-Left> :wincmd h<CR>
nmap <silent> <A-Right> :wincmd l<CR>

" jk instead of Esc
imap jk <Esc>

filetype plugin on
filetype plugin indent on
filetype indent on   " Makes indentation different per file, good with html
filetype on

" automatically add "}" after typing "{"
inoremap {      {}<Left>
inoremap {<CR>  {<CR>}<Esc>O
inoremap {{     {
inoremap {}     {}

" w!! will write as sudo
cmap w!! w !sudo tee % >/dev/null<CR>:e!<CR><CR>
" Bind f2 to pastetoggle
nnoremap <F2> :set invpaste paste?<CR>
" Rebinding supertab to <F3>
let g:SuperTabMappingForward = '<F3>'
" swaps between header and source
map <F4> :A<CR>
" opens a definition in a new tab
map <F5> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
" opens a definition in a vspilt
map <F6> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>)
" set tagbartoggle
nmap <F7> :TagbarToggle<CR>
" go to definition
map <F8> <C-]>
" confirm before quit
map :wq<CR>  :confirm quit<CR>
map :q<CR>  :confirm quit<CR>

" paste with correct indents
nnoremap p p=`]

" Tab remapping
nnoremap tn :tabnext<CR>
nnoremap tp :tabprev<CR>
nnoremap tc :tabnew<CR>

" Resizing split
nnoremap <silent> <Leader>+ :exe "resize " . (winheight(0) * 6/2)<CR>
nnoremap <silent> <Leader>- :exe "resize " . (winheight(0) * 2/6)<CR>

" Press Space to turn off highlighting and clear any message already displayed.
:nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>

" tell it to use an undo file
set undofile
" set a directory to store the undo history
set undodir=~/.vim/undo/

" for templates
let g:email = 'eoghan@thejournal.ie'
let g:username = 'Eoghan Hynes'
let g:license = 'Internal use only'

let mapleader=" "


" highlights text with blue when it goes over 80 characters
highlight OverLength ctermbg=Blue ctermfg=white guibg=#592929
match OverLength /\%81v.\+/

" no bells
set noerrorbells visualbell t_vb=


" buffergator
" Use the right side of the screen
let g:buffergator_viewport_split_policy = 'R'

" I want my own keymappings...
let g:buffergator_suppress_keymaps = 1

" Looper buffers
"" let g:buffergator_mru_cycle_loop = 1

" Go to the previous buffer open
nmap <leader>jj :BuffergatorMruCyclePrev<cr>

" Go to the next buffer open
nmap <leader>kk :BuffergatorMruCycleNext<cr>

" View the entire list of buffers open
nmap <leader>bl :BuffergatorOpen<cr>

" Shared bindings from Solution #1 from earlier
nmap <leader>T :enew<cr>
nmap <leader>bq :bp <BAR> bd #<cr>

" tagbar toggle
nmap <F9> :TagbarToggle<CR>

" lightline options
let g:lightline = {
            \ 'colorscheme': 'wombat',
            \ 'active': {
            \   'left': [['mode', 'paste'],
            \           ['gitbranch', 'readonly', 'filename', 'modified' ]]
            \ },
            \ 'component_function': {
            \   'gitbranch': 'fugitive#head'
            \ },
            \}
" lightline-ale
let g:lightline.component_expand = {
            \  'linter_checking': 'lightline#ale#checking',
            \  'linter_warnings': 'lightline#ale#warnings',
            \  'linter_errors': 'lightline#ale#errors',
            \  'linter_ok': 'lightline#ale#ok',
            \ }
let g:lightline.component_type = {
            \     'linter_checking': 'left',
            \     'linter_warnings': 'warning',
            \     'linter_errors': 'error',
            \     'linter_ok': 'left',
            \ }
let g:lightline.active = { 'right': [[ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ]] }
let g:lightline#ale#indicator_warnings = "‚ö†Ô∏è "
let g:lightline#ale#indicator_errors = "‚úò"
let g:lightline#ale#indicator_ok = "üòéü§ô"

" highlight print statements
:highlight preprint ctermbg=blue
:highlight preprint ctermfg=white
:match preprint /pre_print_r(.*);/

" UndoTree
nnoremap <F6> :UndotreeToggle<CR>

" remove trailing whitespace
nnoremap <Leader>rtw :%s/\s\+$//e<CR>

" ALE
let g:ale_php_phpcs_standard = "PSR2"
let g:ale_sign_column_always=1
let g:ale_pattern_options = {'\.class.php$': { 'ale_enabled': 0 }} " disable for older code
let g:ale_javascript_prettier_eslint_use_global = 1
let g:ale_css_prettier_use_global = 1
let g:ale_css_stylelint_use_global = 1
let g:ale_css_stylelint_options = '--config ~/.stylelintrc'
let g:ale_fixers = {
            \'php': ['phpcbf'],
            \'css': ['stylelint','prettier'],
            \'javascript': ['prettier-eslint']}
let g:ale_linters = {
            \'html': ['HTMLHint','proselint'],
            \'css': ['stylelint','prettier'],
            \'javascript': ['eslint','prettier']}

" php.vim ‚Äì improve performance
let g:php_html_load = 0
let g:php_html_in_heredoc = 0
let g:php_html_in_nowdoc = 0
let g:php_sql_query = 0
let g:php_sql_heredoc = 0
let g:php_sql_nowdoc = 0

" Emmet
let g:user_emmet_install_global = 0
autocmd FileType html,twig EmmetInstall

" Show function names in cwindow
nmap <leader>ff :call ShowFunc("no")<cr><Esc>
nmap <leader>fa :call ShowFunc("yes")<cr><Esc>
function! ShowFunc(sort)
    let gf_s = &grepformat
    let gp_s = &grepprg
    if ( &filetype == "c" || &filetype == "php" || &filetype == "python" ||
                \ &filetype == "sh" )
        let &grepformat='%*\k%*\sfunction%*\s%l%*\s%f %m'
        let &grepprg = 'ctags -x --'.&filetype.'-types=f --sort='.a:sort
    elseif ( &filetype == "perl" )
        let &grepformat='%*\k%*\ssubroutine%*\s%l%*\s%f %m'
        let &grepprg = 'ctags -x --perl-types=s --sort='.a:sort
    elseif ( &filetype == "vim" )
        let &grepformat='%*\k%*\sfunction%*\s%l%*\s%f %m'
        let &grepprg = 'ctags -x --vim-types=f --language-force=vim --sort='.a:sort
    endif
    if (&readonly == 0) | update | endif
    silent! grep %
    cwindow 10
    redraw
    let &grepformat = gf_s
    let &grepprg = gp_s
endfunc

" lazy pasting to avoid :set paste :set nopaste
let &t_SI .= "\<Esc>[?2004h"
let &t_EI .= "\<Esc>[?2004l"

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

function! XTermPasteBegin()
    set pastetoggle=<Esc>[201~
    set paste
    return ""
endfunction


" Faster scroll mode
let g:multiscroll_on = 0
function! MultiScroll()
    if g:multiscroll_on
        noremap j j
        noremap k k
        let g:multiscroll_on = 0
    else
        noremap j 5j
        noremap k 5k
        let g:multiscroll_on = 1
    endif
endfunction
map \k :call MultiScroll()<RETURN>
